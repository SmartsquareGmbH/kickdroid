import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    ext {
        gradleVersion = "4.9"

        kotlinVersion = "1.2.61"
        playServicesVersion = "15.0.1"

        androidGradlePluginVersion = "3.3.0-alpha07"
        gradleVersionsPluginVersion = "0.20.0"
        junitPluginVersion = "1.2.0.0"
        ktlintGradleVersion = "5.0.0"
        ktlintVersion = "0.27.0"
        detektVersion = "1.0.0.RC8"
        jacocoPluginVersion = "0.12.0"
        jacocoVersion = "0.8.2"

        appcompatVersion = "1.0.0-rc01"
        recyclerviewVersion = "1.0.0-rc01"
        cardviewVersion = "1.0.0-rc01"
        materialDesignVersion = "1.0.0-rc01"

        rxJavaVersion = "2.2.1"
        rxBindingVersion = "2.1.1"
        autodisposeVersion = "1.0.0-RC2"
        kOptionalVersion = "1.6.0"

        koinVersion = "0.9.3"

        moshiVersion = "1.6.0"
        iconicsVersion = "3.0.4"
        kotterknifeVersion = "2.0"
        communityMaterialTypefaceVersion = "2.0.46.1"

        junitVersion = "5.2.0"
        kluentVersion = "1.41"
        mockkVersion = "1.8.6"
        kotlinJsonAssertVersion = "0.1.0"

        leakCanaryVersion = "1.6.1"
    }

    repositories {
        gradlePluginPortal()
        google()
        jcenter()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$androidGradlePluginVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "de.mannodermaus.gradle.plugins:android-junit5:$junitPluginVersion"

        classpath "com.vanniktech:gradle-android-junit-jacoco-plugin:$jacocoPluginVersion"
        classpath "com.github.ben-manes:gradle-versions-plugin:$gradleVersionsPluginVersion"
        classpath "gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektVersion"
        classpath "gradle.plugin.org.jlleitschuh.gradle:ktlint-gradle:$ktlintGradleVersion"
    }
}

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"

apply plugin: "de.mannodermaus.android-junit5"
apply plugin: "com.vanniktech.android.junit.jacoco"

apply plugin: "com.github.ben-manes.versions"
apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: "io.gitlab.arturbosch.detekt"

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "de.smartsquare.kickdroid"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0.0"

        resConfigs "en", "de"
    }

    sourceSets.each {
        it.java.srcDirs += "src/$it.name/kotlin"
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        if (shouldSign()) {
            release {
                storeFile file(getFromSecrets("RELEASE_STORE_FILE"))
                storePassword getFromSecrets("RELEASE_STORE_PASSWORD")
                keyAlias getFromSecrets("RELEASE_KEY_ALIAS")
                keyPassword getFromSecrets("RELEASE_KEY_PASSWORD")
            }
        }
    }

    buildTypes {
        boolean shouldSign = shouldSign()

        if (!shouldSign) {
            logger.warn("This build will not be signed because it is missing the keystore info. Please add " +
                    "values for 'RELEASE_STORE_FILE', #RELEASE_STORE_PASSWORD', 'RELEASE_KEY_ALIAS' and " +
                    "'RELEASE_KEY_PASSWORD' to your secrets.properties file if you want the apk to be signed.")
        }

        release {
            postprocessing {
                removeUnusedCode true
                removeUnusedResources true
                obfuscate true
                optimizeCode true
                proguardFiles "config/proguard-rules.pro"
            }

            if (shouldSign) {
                signingConfig signingConfigs.release
            }
        }
    }

    lintOptions {
        warningsAsErrors = true
    }
}

repositories {
    google()
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    implementation "androidx.appcompat:appcompat:$appcompatVersion"
    implementation "androidx.cardview:cardview:$recyclerviewVersion"
    implementation "androidx.recyclerview:recyclerview:$cardviewVersion"
    implementation "com.google.android.material:material:$materialDesignVersion"

    implementation "com.google.android.gms:play-services-nearby:$playServicesVersion"

    implementation "org.koin:koin-core:$koinVersion"
    implementation "org.koin:koin-android:$koinVersion"
    implementation "org.koin:koin-android-architecture:$koinVersion"

    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding:$rxBindingVersion"
    implementation "com.uber.autodispose:autodispose-ktx:$autodisposeVersion"
    implementation "com.uber.autodispose:autodispose-android-archcomponents-ktx:$autodisposeVersion"
    implementation "com.gojuno.koptional:koptional-rxjava2-extensions:$kOptionalVersion"

    implementation "com.squareup.moshi:moshi:$moshiVersion"
    implementation "com.github.rubengees:kotterknife:$kotterknifeVersion"
    implementation "com.mikepenz:iconics-core:$iconicsVersion@aar"
    implementation "com.mikepenz:iconics-views:$iconicsVersion@aar"
    implementation "com.mikepenz:community-material-typeface:$communityMaterialTypefaceVersion@aar"

    testImplementation "com.gregwoodfill.assert:kotlin-json-assert:$kotlinJsonAssertVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.amshove.kluent:kluent-android:$kluentVersion"
    testImplementation "org.koin:koin-test:$koinVersion"
    testImplementation "io.mockk:mockk:$mockkVersion"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"
}

tasks.withType(KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}

detekt {
    version = detektVersion

    profile("main") {
        input = "$projectDir/src/main/kotlin"
        config = "$projectDir/config/detekt/detekt.yml"
        output = "$buildDir/reports/detekt"
    }
}

ktlint {
    version = ktlintVersion
    reporters = ["CHECKSTYLE"]
}

junitJacoco {
    jacocoVersion = project.ext.jacocoVersion
}

wrapper {
    gradleVersion = project.ext.gradleVersion
}

static String getFromSecrets(String key) {
    Properties result = new Properties()

    try {
        result.load(new FileInputStream(new File("secrets.properties")))
    } catch (Exception ignored) {
        throw new GradleException("Please add a secrets.properties file with a value for $key to perform this action.")
    }

    if (!result.containsKey(key)) {
        throw new GradleException("Please include a value for $key in your secrets.properties " +
                "file to perform this action.")
    }

    return result[key]
}

static boolean shouldSign() {
    Properties result = new Properties()

    try {
        result.load(new FileInputStream(new File("secrets.properties")))
    } catch (Exception ignored) {
        return false
    }

    return result.containsKey("RELEASE_STORE_FILE") && result.containsKey("RELEASE_STORE_PASSWORD") &&
            result.containsKey("RELEASE_KEY_ALIAS") && result.containsKey("RELEASE_KEY_PASSWORD")
}
